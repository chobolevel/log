# nginx에서 필수로 정의해야 하는 블록이지만 간단한 설정에서는 비워둘 수 있음
# nginx에서 클라이언트 연결 처리 방식을 설정하는 부분으로 고성능 서버에서는 중요한 최적화 요소
# worker_connections = 한 워커 프로세스가 동시에 처리할 수 있는 최대 연결 수(default = 512)
# use = 어떤 이벤트 처리 매커니즘을 사용할 지 지정
# multi_accept = 워커 프로세스가 한 번에 여러 클라이언트 연결을 수락할지 여부(default = off)
# accept_mutex = 여러 워커가 동시에 연결을 받아 충돌하는 것을 방지하기 위한 락(모든 워커가 동시에 깨어나는 문제 줄임)(default = on)
events {}

# http 요청 설정
http {
  # access, error 로그 경로 설정
  access_log /var/log/nginx/access.log;
  error_log /var/log/nginx/error.log;

  # 리버스 프록시 대상(백엔드 서버) 의미
  # server backend에서 backend는 도커 컨테이너의 이름
  # 만약 도커 컨테이너를 사용하지 않는 경우 IP나 도메인 형식으로 지정 가능
  # 여러개의 server 지정하는 경우 라운드 로빈 방식으로 로드밸런싱(설정으로 로드밸런싱 방법 설정 가능)
  upstream backend {
    server backend:9565;
  }

  server {
    # 포트
    listen 80;
    # 이 서버 블록이 응답할 도메인
    server_name api.chobolevel.co.kr;
    # 서버 정보(nginx 버전 등)를 헤더에서 숨김
    server_tokens off;

    # Let's Encrypt 인증서 발급을 위한 ACME challenge 경로 허용
    # /var/www/certbot 경로에 파일이 있어야 인증됨
    location /.well-known/acme-challenge/ {
      allow all;
      root /var/www/certbot;
    }

    # 모든 http 요청을 https 요청으로 리다이렉션(301)
    location / {
      return 301 https://$host$request_uri;
    }
  }

  server {
    listen 443 ssl;
    server_name api.chobolevel.co.kr;
    server_tokens off;

    # Let's encrypt 발급된 SSL 인증서와 관련된 설정
    # 보안 강화용 DH 파라미터도 포함
    ssl_certificate /etc/letsencrypt/live/api.chobolevel.co.kr/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/api.chobolevel.co.kr/privkey.pem;
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

    # 리버스 프록시 설정
    location / {
      # 웹 서버 까지만 https 통신 후 백엔드 서버로는 http 요청
      proxy_pass http://backend;
      proxy_http_version 1.1;
      # WebSocket 지원을 위해 Upgrade 및 Connection: upgrade 헤더를 설정
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
      # Host 헤더를 클라이언트 요청 그대로 백엔드로 전달
      proxy_set_header Host $host;
    }
  }
}
